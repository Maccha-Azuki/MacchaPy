    # error_number_list = []
    # f = 1000
    # N = 1000
    # t = np.linspace(0, f, 6*f*f)  # 时间轴
    # y = np.ones((f, 6000), int)
    # mt = []
    # for i in range(f):
    #     r_code = int(round(np.random.random()))
    #     y[i] = r_code * 2 - 1  # 双极性
    #     mt.append(r_code * 2 - 1)
    # y = y.flatten()  # 降维
    # plt.figure("waitingformod")
    # plt.plot(t, y)
    # fc = int(1.5 * f)
    # carrier = np.sin(2 * fc * np.pi * t + np.pi)
    # # plt.figure("carry")
    # # plt.plot(t, carrier)
    # PSK = carrier * y
    # # plt.figure("PSK")
    # # plt.plot(t, PSK)
    # SNR_list_dB = []
    # SNR_list = []
    # position = int(6000 / 2)
    # for SNR_dB in range(1, 8):
    #     print(SNR_dB)
    #     SNR_list_dB.append(SNR_dB)
    #     SNR = 10 ** (SNR_dB / 10)
    #     SNR_list.append(SNR)
    #     y_wn = []
    #     Ps = np.sum(abs(PSK) ** 2) / len(PSK)
    #     Pn = Ps / (10 ** (SNR_dB / 10))
    #     noise = np.random.randn(len(PSK)) * np.sqrt(Pn)
    #     for i in range(len(PSK)):
    #         y_wn.append(PSK[i]+noise[i])
    #     # plt.figure()
    #     # plt.plot(t, y_wn)
    #     # output, timeLine, fft_single, f_single = analyse_show(y_wn, 500, 1)
    #     # drawTheGraph(output, timeLine, fft_single, f_single, f*N, "y_wn GRAPH")
    #     y_wn, t1 = lpf.bpfDataOnly(5, 10000, 500, 3000, y_wn)
    #     # plt.figure("After BPF")
    #     # plt.plot(t, y_wn)
    #     # output, timeLine, fft_single, f_single = analyse_show(y_wn, 500, 1)
    #     # drawTheGraph(output, timeLine, fft_single, f_single, f*N, "BPF GRAPH")
    #     yt = y_wn * carrier
    #     # plt.figure("乘载波后")
    #     # plt.plot(t, yt)
    #     # output, timeLine, fft_single, f_single = analyse_show(yt, f*N, f)
    #     # drawTheGraph(output, timeLine, fft_single, f_single, f*N, "BPF GRAPH")
    #     y2, t1 = lpf.lpfDataOnly(6, 1000000, 10500, yt)  # t有fs个点，即N*f
    #     # plt.figure("LPF后")
    #     # plt.plot(t, y2)
    #     # plt.show()
    #     y_out = []
    #     for i in range(6000000):
    #         y_out.append(0)
    #     for i in range(f):
    #         y_out[i * 6000 + position] = 1
    #     y2 = y_out * y2
    #
    #     # demodulation_y = []
    #     y_demod = []
    #     for code in y2:
    #         if code == 0:
    #             continue
    #         elif code < 0:
    #             y_demod.append(-1)
    #             # for i in range(6000):
    #             #     demodulation_y.append(-1)
    #         else:
    #             y_demod.append(1)
    #             # for i in range(6000):
    #             #     demodulation_y.append(1)
    #
    #     error_numbers = 0
    #     for j in range(len(y_demod)):
    #         if y_demod[j] != mt[j]:
    #             error_numbers += 1
    #     print(error_numbers)
    #     error_number_list.append(error_numbers/len(y_demod))
    # BPSK_t_AWGN = []
    # for i in SNR_list:
    #     BPSK_t_AWGN.append(1 / 2 * math.erfc(math.sqrt(i)))
    # plt.semilogy(range(1, 8), error_number_list)
    # plt.semilogy(range(1, 8), BPSK_t_AWGN)